{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","body","startDate","endDate","status","priority","todoList","isDataVisible","handelChange","event","target","value","name","setState","handelSubmit","preventDefault","self","axios","post","then","response","getData","catch","error","console","log","resetUserInput","setData","data","handleDelete","Tid","delete","id","get","handleGetData","Container","Row","Col","className","Form","onSubmit","this","FormGroup","Label","for","Input","type","placeholder","required","onChange","tag","check","checked","Button","style","width","height","src","alt","size","color","onClick","Table","striped","bordered","hover","dark","map","index","key","_id","split","Delete","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0da64324.chunk.js","sourcesContent":["import React from 'react';\n// import { SketchPicker } from 'react-color';\nimport {  Delete } from '@material-ui/icons';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button, Container, Col, Table, Form, FormGroup, Label, Row, Input } from 'reactstrap';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    title: '',\n    body: '',\n    startDate: \"2020-02-02\",\n    endDate: \"2020-02-02\",\n    status: 'Done',\n    priority: 5,\n    todoList: [],\n    isDataVisible: false,\n  }\n  handelChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handelSubmit = (event) => {\n    event.preventDefault();\n\n    // const dataTodo = {\n    //   title: this.state.title,\n    //   body: this.state.body,\n    //   startDate: this.state.startDate,\n    //   endDate: this.state.endDate,\n    //   status: this.state.title,\n    //   priority: this.state.priority,\n    // };\n\n\n    var self = this;\n\n    // axios.post('http://localhost:8000/api/newTodo/', {\n    axios.post('api/newTodo/', {\n\n      title: this.state.title,\n      body: this.state.body,\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      status: this.state.status,\n      priority: this.state.priority,\n    })\n      .then(function (response) {\n        // console.log(response);\n        self.getData();\n\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    this.resetUserInput();\n\n\n  }\n\n  resetUserInput = () => {\n    this.setState({\n      title: '',\n      body: ''\n    });\n  }\n\n  setData = (data) => {\n    this.setState({\n      todoList: data,\n      isDataVisible: true\n    });\n  }\n\n  handleDelete = (Tid) => {\n    // console.log(\"Tid\");\n    // console.log(Tid);\n    var self = this;\n    axios.delete('api/deleteTodo/',{id:Tid})\n    .then((response) => {\n      // console.log(response.data);\n      self.getData();\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n\n  }\n\n\n  getData = () => {\n\n\n    var self = this;\n    axios.get('api/getAllData/')\n      .then((response) => {\n        // console.log(response.data);\n        self.setData(response.data);\n\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n\n\n  }\n\n  handleGetData = (event) => {\n    event.preventDefault();\n    this.getData();\n  }\n\n  render() {\n    // console.log(this.state);\n\n    return (\n      <>\n        <Container>\n          <Row>\n            <Col>\n              <div className=\"p-5\">\n                <Form onSubmit={this.handelSubmit} >\n\n                  <FormGroup>\n                    <Label for=\"title\">Title</Label>\n                    <Input type=\"title\" name=\"title\" value={this.state.title} id=\"title\" placeholder=\"Title\" required onChange={this.handelChange} />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"body\">Body</Label>\n                    <Input type=\"body\" name=\"body\" value={this.state.body} id=\"body\" placeholder=\"Body\" required onChange={this.handelChange} />\n                  </FormGroup>\n\n\n                  <FormGroup>\n                    <Label for=\"startDate\">Start Date</Label>\n                    <Input\n                      type=\"date\"\n                      name=\"startDate\"\n                      id=\"startDate\"\n                      value={this.state.startDate}\n                      required onChange={this.handelChange}\n                      placeholder=\"Start Date\"\n                      required\n                    />\n                  </FormGroup>\n\n                  <FormGroup>\n                    <Label for=\"endDate\">End Date</Label>\n                    <Input\n                      type=\"date\"\n                      name=\"endDate\"\n                      id=\"endDate\"\n                      value={this.state.endDate}\n                      required onChange={this.handelChange}\n                      placeholder=\"End Date\"\n                      required\n                    />\n                  </FormGroup>\n\n                  <FormGroup>\n                    <Label for=\"exampleSelect\">Select</Label>\n                    <Input type=\"select\" name=\"status\" id=\"exampleSelect\" value={this.state.status}\n                      required onChange={this.handelChange}>\n                      <option value=\"Done\">Done</option>\n                      <option value=\"Working on it\">Working on it</option>\n                      <option value=\"ToDo\">ToDo</option>\n\n                    </Input>\n                  </FormGroup>\n\n\n                  <FormGroup tag=\"fieldset\" >\n                    <legend>Priority</legend>\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"priority\" checked={this.state.priority === 1} onChange={() => { this.setState({ priority: 1 }) }} />{' '}1</Label>\n                    </FormGroup>\n\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"priority\" checked={this.state.priority === 2} onChange={() => { this.setState({ priority: 2 }) }} />{' '}2</Label>\n                    </FormGroup>\n\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"priority\" checked={this.state.priority === 3} onChange={() => { this.setState({ priority: 3 }) }} />{' '}3</Label>\n                    </FormGroup>\n\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"priority\" checked={this.state.priority === 4} onChange={() => { this.setState({ priority: 4 }) }} />{' '}4</Label>\n                    </FormGroup>\n\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"priority\" checked={this.state.priority === 5} onChange={() => { this.setState({ priority: 5 }) }} />{' '}5</Label>\n                    </FormGroup>\n\n                  </FormGroup>\n\n\n                  <Button>Submit</Button>\n                </Form>\n              </div>\n            </Col>\n\n            <Col> <img style={{ width: '80%', height: '70%' }} src={'./todoImage.jpeg'} alt=\"TODO\" /></Col>\n          </Row>\n          {/* <div className=\"m-5 pb-5 bg-info\">I have a margin on all sides (3rem = 48px) and a bottom padding (3rem = 48px)</div> */}\n\n\n          <Row>\n            <div className=\"mt-2 mb-2\" size=\"lg\">\n              <Button color=\"info\" onClick={this.getData}>\n                Todo List ?\n               </Button>\n            </div>\n            {this.state.isDataVisible === true ?\n              <Table striped bordered hover dark className=\"mt-2\">\n                <thead>\n                  <tr>\n                    <th>Title</th>\n                    <th>Body</th>\n                    <th>Start Date</th>\n                    <th>End Date</th>\n                    <th>Status </th>\n                    <th>Priority</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.todoList.map((value, index) => {\n                    return <tr key={value._id}>\n                      <td>{value.title}</td>\n                      <td>{value.body}</td>\n                      <td>{value.startDate.split('T')[0]}</td>\n                      <td>{value.endDate.split('T')[0]}</td>\n                      <td>{value.status}</td>\n                      <td>{value.priority}</td>\n                      {/* <td>{value._id}</td> */}\n                      <td>\n                        {/* <Edit style={{ color: '#4CEE9D' }} onClick={(event)=>{console.log(\"here\")}}/> */}\n                        <Delete color=\"secondary\" onClick={(event) => { event.preventDefault(); this.handleDelete(value._id) }} />\n\n                      </td>\n\n\n                    </tr>\n                  })\n                  }\n                </tbody>\n              </Table>\n              :\n              <></>}\n          </Row>\n\n        </Container>\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}